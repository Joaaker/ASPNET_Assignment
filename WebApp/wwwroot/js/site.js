// Dark Mode
// Generated by ChatGPT-03-high - Syncs both Dark mode toggles (Hamburger and Settings)
// Check if the user prefers dark mode based on system and adjust accordingly
// Saves Dark mode preference in local storage and prioritize local storage
document.addEventListener('DOMContentLoaded', function () {
    const defaultToggle = document.getElementById('dark-mode');
    const hamburgerToggle = document.getElementById('hamburger-dark-mode');

    function updateDarkMode(isDark) {
        if (isDark) {
            document.body.classList.remove('light');
            document.body.classList.add('dark');
        } else {
            document.body.classList.remove('dark');
            document.body.classList.add('light');
        }
        if (defaultToggle) defaultToggle.checked = isDark;
        if (hamburgerToggle) hamburgerToggle.checked = isDark;

        localStorage.setItem('darkMode', isDark);
    }

    let storedDarkMode = localStorage.getItem('darkMode');
    if (storedDarkMode === null) {
        const prefersDark = window.matchMedia &&
            window.matchMedia('(prefers-color-scheme: dark)').matches;
        updateDarkMode(prefersDark);
    } else {
        updateDarkMode(storedDarkMode === 'true');
    }

    if (defaultToggle) {
        defaultToggle.addEventListener('change', function () {
            updateDarkMode(this.checked);
        });
    }
    if (hamburgerToggle) {
        hamburgerToggle.addEventListener('change', function () {
            updateDarkMode(this.checked);
        });
    }
});

const validateField = (field) => {
    const form = field.closest("form");
    const errorSpan = form
        ? form.querySelector(`span[data-valmsg-for="${field.name}"]`)
        : null;
    if (!errorSpan) return;

    let errorMessage = "";
    const value = field.value.trim();

    if (field.hasAttribute("data-val-required") && value === "")
        errorMessage = field.getAttribute("data-val-required");

    if (field.hasAttribute("data-val-regex") && value !== "") {
        const pattern = new RegExp(field.getAttribute("data-val-regex-pattern"));
        if (!pattern.test(value))
            errorMessage = field.getAttribute("data-val-regex");
    }

    if (!errorMessage && field.name === "ConfirmPassword") {                      
        const pwdField = form.querySelector('input[name="Password"]');            
        if (value !== "" && pwdField.value.trim() !== value) {                    
            errorMessage = "Invalid";                                   
        }
    }


    if (errorMessage) {
        field.classList.add("input-validation-error");
        errorSpan.classList.remove("field-validation-valid");
        errorSpan.classList.add("field-validation-error");
        errorSpan.textContent = errorMessage;
    } else {
        field.classList.remove("input-validation-error");
        errorSpan.classList.remove("field-validation-error");
        errorSpan.classList.add("field-validation-valid");
        errorSpan.textContent = "";
    }
};

document.addEventListener("DOMContentLoaded", () => {
    // Koppla på input-event på alla valideringsfält i *alla* formulär
    document
        .querySelectorAll("input[data-val='true']")
        .forEach(field => {
            field.addEventListener("input", () => validateField(field));
        });
});