// Dark Mode
// Generated by ChatGPT-03-high - Syncs both Dark mode toggles (Hamburger and Settings)
// Check if the user prefers dark mode based on system and adjust accordingly
// Saves Dark mode preference in local storage and prioritize local storage
document.addEventListener('DOMContentLoaded', () => {
    if (!getCookie("cookieConsent")) {
        showCookieModal()
    }


    const defaultToggle = document.getElementById('dark-mode');
    const hamburgerToggle = document.getElementById('hamburger-dark-mode');

    function updateDarkMode(isDark) {
        if (isDark) {
            document.body.classList.remove('light');
            document.body.classList.add('dark');
        } else {
            document.body.classList.remove('dark');
            document.body.classList.add('light');
        }
        if (defaultToggle) defaultToggle.checked = isDark;
        if (hamburgerToggle) hamburgerToggle.checked = isDark;

        localStorage.setItem('darkMode', isDark);
    }

    let storedDarkMode = localStorage.getItem('darkMode');
    if (storedDarkMode === null) {
        const prefersDark = window.matchMedia &&
            window.matchMedia('(prefers-color-scheme: dark)').matches;
        updateDarkMode(prefersDark);
    } else {
        updateDarkMode(storedDarkMode === 'true');
    }

    if (defaultToggle) {
        defaultToggle.addEventListener('change', function () {
            updateDarkMode(this.checked);
        });
    }
    if (hamburgerToggle) {
        hamburgerToggle.addEventListener('change', function () {
            updateDarkMode(this.checked);
        });
    }
});

function showCookieModal() {
    const modal = document.getElementById('cookieModal')
    if (modal) modal.style.display = "flex"

    const consentValue = getCookie('cookieConsent')
    if (!consentValue) return

    try {
        const consent = JSON.parse(consentValue)
        document.getElementById("cookieFunctional").checked = consent.functional
        document.getElementById("cookieAnalytics").checked = consent.analytics
        document.getElementById("cookieMarketing").checked = consent.marketing
    } catch (error) {
        console.error('unable to handle cookie consent values', error)
    }
}

function hideCookieModal() {
    const modal = document.getElementById('cookieModal');
    if (modal) modal.style.display = "none";
}

function getCookie(name) {
    const nameEQ = name + "="
    const cookies = document.cookie.split(';')
    for (let cookie of cookies) {
        cookie = cookie.trim()
        if (cookie.indexOf(nameEQ) === 0) {
            return decodeURIComponent(cookie.substring(nameEQ.length))
        }
    }
    return null
}

//We do this is the Controller aswell - Function to set a cookie with an expiration date
function setCookie(name, value, days) {
    let expires = ""
    if (days) {
        const date = new Date()
        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000)
        expires = "; expires=" + date.toUTCString()
    }

    const encodedValue = encodeURIComponent(value || "")
    document.cookie = `${name}=${encodedValue}${expires}; path=/; SameSite=Lax`
}

async function acceptAll() {
    const consent = {
        essential: true,
        functional: true,
        analytics: true,
        marketing: true
    }

    setCookie("cookieConsent", JSON.stringify(consent), 90)
    await handleConsent(consent)
    hideCookieModal()
}

async function acceptSelected() {
    const form = document.getElementById("cookieConsentForm");
    const formData = new FormData(form);

    const consent = {
        essential: true,
        functional: formData.get("functional") === "on",
        analytics: formData.get("analytics") === "on",
        marketing: formData.get("marketing") === "on"
    }

    setCookie("cookieConsent", JSON.stringify(consent), 90)
    await handleConsent(consent)
    hideCookieModal()
}

async function handleConsent(consent) {
    try {
        const res = await fetch('/cookies/setcookies', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(consent)
        })

        if (!res.ok) {
            console.error('Unable to set cookie consent', await res.text())
        }
    } catch (error) {
        console.error("Error: ", error)
    }
}

const validateField = (field) => {
    const form = field.closest("form");
    const errorSpan = form
        ? form.querySelector(`span[data-valmsg-for="${field.name}"]`)
        : null;
    if (!errorSpan) return;

    let errorMessage = "";
    const value = field.value.trim();

    if (field.hasAttribute("data-val-required") && value === "")
        errorMessage = field.getAttribute("data-val-required");

    if (field.hasAttribute("data-val-regex") && value !== "") {
        const pattern = new RegExp(field.getAttribute("data-val-regex-pattern"));
        if (!pattern.test(value))
            errorMessage = field.getAttribute("data-val-regex");
    }

    if (!errorMessage && field.name === "ConfirmPassword") {                      
        const pwdField = form.querySelector('input[name="Password"]');            
        if (value !== "" && pwdField.value.trim() !== value) {                    
            errorMessage = "Invalid";                                   
        }
    }


    if (errorMessage) {
        field.classList.add("input-validation-error");
        errorSpan.classList.remove("field-validation-valid");
        errorSpan.classList.add("field-validation-error");
        errorSpan.textContent = errorMessage;
    } else {
        field.classList.remove("input-validation-error");
        errorSpan.classList.remove("field-validation-error");
        errorSpan.classList.add("field-validation-valid");
        errorSpan.textContent = "";
    }
};

document.addEventListener("DOMContentLoaded", () => {
    document
        .querySelectorAll("input[data-val='true']")
        .forEach(field => {
            field.addEventListener("input", () => validateField(field));
        });
});