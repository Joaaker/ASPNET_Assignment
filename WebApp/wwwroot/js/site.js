


//Dark Mode
// Generated by ChatGPT-03-high - Syncs both Dark mode toggles (Hamburger and Settings)
// Also check if the user prefers dark mode and sets to dark mode 
document.addEventListener('DOMContentLoaded', function () {
    const defaultToggle = document.getElementById('dark-mode');
    const hamburgerToggle = document.getElementById('hamburger-dark-mode');

    function updateDarkMode(isDark) {
        if (isDark) {
            document.body.classList.remove('light');
            document.body.classList.add('dark');
        } else {
            document.body.classList.remove('dark');
            document.body.classList.add('light');
        }
        if (defaultToggle) defaultToggle.checked = isDark;
        if (hamburgerToggle) hamburgerToggle.checked = isDark;
    }

    const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    updateDarkMode(prefersDark);

    if (defaultToggle) {
        defaultToggle.addEventListener('change', function () {
            updateDarkMode(this.checked);
        });
    }
    if (hamburgerToggle) {
        hamburgerToggle.addEventListener('change', function () {
            updateDarkMode(this.checked);
        });
    }
});


// Generated by ChatGPT-03-high - Makes the Dark Mode div clickable without closing the drop-down settings ul
document.querySelector('.dark-mode-container').addEventListener('click', function (e) { e.stopPropagation(); });




//Hamburger menu
const hamburgerBtn = document.getElementById('hamburgerBtn');
const menu = document.getElementById('menu');

hamburgerBtn.addEventListener('click', function() {
    menu.classList.toggle('active');
});

//Modal
document.addEventListener('DOMContentLoaded', () => {
    const previewSize = 150

    // Open Buttons
    const modalButtons = document.querySelectorAll('[data-modal="true"]')
    modalButtons.forEach(button => {
        button.addEventListener('click', () => {
            const modalTarget = button.getAttribute('data-target')
            const modal = document.querySelector(modalTarget)

            if (modal) {
                modal.style.display = 'flex';
                document.body.classList.add('modal-open');
            }

        })
    })


    // Close Buttons
    const closeButtons = document.querySelectorAll('[data-close="true"]')
    closeButtons.forEach(button => {
        button.addEventListener('click', () => {
            const modal = button.closest('.modal-container')
            if (modal) {
                modal.style.display = 'none'
                document.body.classList.remove('modal-open');

                //Clear Formdata
                modal.querySelectorAll('form').forEach(form => {
                    form.reset()

                    const imagePreview = form.querySelector('.image-preview')
                    if (imagePreview)
                        imagePreview.src = ''

                    const imagePreviewer = form.querySelector('.image-previewer')
                    if (imagePreviewer)
                        imagePreviewer.classList.remove('selected')
                })
            }
        })
    })

    //Handle Image previewer
    document.querySelectorAll('.image-previewer').forEach(previewer => {
        const fileInput = previewer.querySelector('input[type="file"]');
        const imagePreview = previewer.querySelector('.image-preview');

        previewer.addEventListener('click', () => fileInput.click());

        fileInput.addEventListener('change', ({ target: { files } }) => {
            const file = files[0];
            if (file) {
                processImage(file, imagePreview, previewer, previewSize);
            }
        })
    })

    // Handle submit forms
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            clearErrorMessages(form);

            const formData = new FormData(form);

            try {
                const res = await fetch(form.action, {
                    method: 'post',
                    body: formData
                });

                if (res.ok) {
                    const modal = form.closest('.modal-container')
                    if (modal)
                        modal.style.display = 'none';

                    window.location.reload()
                }
                else if (res.status === 400) {
                    const data = await res.json();

                    if (data.errors) {
                        Object.keys(data.errors).forEach(key => {
                            let input = form.querySelector(`[name="${key}"]`);
                            if (input) {
                                input.classList.add('input-validation-error');
                            }

                            let span = form.querySelector(`[data-valmsg-for="${key}"]`);
                            if (span) {
                                span.innerText = data.errors[key].join('\n');
                                span.classList.add('field-validation-error');
                            }
                        });
                    }
                }
            }
            catch {
                console.log('error submitting the form');
            }
        })
    })
})

// Clear error messages
function clearErrorMessages(form) {
    form.querySelectorAll('[data-val="true"]').forEach(input => {
        input.classList.remove('input-validation-error');
    });

    form.querySelectorAll('[data-valmsg-for]').forEach(span => {
        span.innerText = '';
        span.classList.remove('field-validation-error');
    });
}

// Image upload
async function loadImage(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader()

        reader.onerror = () => reject(new Error("Failed to upload file."))
        reader.onload = (e) => {
            const img = new Image()
            img.onerror = () => reject(new Error("Failed to load image."))
            img.onload = () => resolve(img)
            img.src = e.target.result
        }

        reader.readAsDataURL(file)
    })
}

// Process Image
async function processImage(file, imagePreview, previewer, previewSize = 150) {
    try {
        const img = await loadImage(file);
        const canvas = document.createElement('canvas');
        canvas.width = previewSize;
        canvas.height = previewSize;

        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0, previewSize, previewSize);
        imagePreview.src = canvas.toDataURL('image/jpeg');
        previewer.classList.add('selected');
    }
    catch (error) {
        console.error('Failed on image-processing:', error);
    }
}

document.addEventListener("DOMContentLoaded", function () {
    var editModal = document.getElementById('edit-member-modal');

    editModal.addEventListener('show.bs.modal', function (event) {
        // Knappen som öppnade modalen
        var button = event.relatedTarget;
        // Hämta värdet från data-attributet
        var memberId = button.getAttribute('data-member-id');

        // Leta upp det dolda fältet i edit-formuläret
        var inputId = editModal.querySelector('input[name="Id"]');
        if (inputId) {
            inputId.value = memberId;
        }
    });
});