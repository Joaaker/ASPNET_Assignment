//Makes the Dark Mode div clickable without closing the drop-down settings ul
document.querySelector('.dark-mode-container').addEventListener('click', function (e) { e.stopPropagation(); });

//Hamburger menu
const hamburgerBtn = document.getElementById('hamburgerBtn');
const menu = document.getElementById('menu');

//Generated by ChatGPT 4o - Close hamburger dropdown when clicking outside
document.addEventListener('click', function(e) {
    const hamburgerMenu = document.querySelector('.expandable-menu');
    const isClickInside = hamburgerMenu?.contains(e.target);
    const isHamburgerBtn = e.target === hamburgerBtn || hamburgerBtn?.contains(e.target);
    
    if (!isClickInside && !isHamburgerBtn) {
        menu?.classList.remove('active');
        //Generated by ChatGPT 4o  Close all notification dropdowns when closing hamburger menu
        closeAllDropdowns(null, new Set(document.querySelectorAll('.notification-dropdown')));
    }
});

hamburgerBtn.addEventListener('click', function(e) {
    e.stopPropagation();
    menu.classList.toggle('active');
});

// Modals
document.addEventListener('DOMContentLoaded', () => {

    // Open Buttons
    const modalButtons = document.querySelectorAll('[data-modal="true"]');
    modalButtons.forEach(button => {
        button.addEventListener('click', () => {
            const modalTarget = button.getAttribute('data-target');
            const modal = document.querySelector(modalTarget);

            if (modal) {
                modal.style.display = 'flex';
                document.body.classList.add('modal-open');
            }
        });
    });

    // Close Buttons
    const closeButtons = document.querySelectorAll('[data-close="true"]');
    closeButtons.forEach(button => {
        button.addEventListener('click', () => {
            const modal = button.closest('._modal');
            if (modal) {
                modal.style.display = 'none';
                document.body.classList.remove('modal-open');

                modal.querySelectorAll('form').forEach(form => {
                    form.reset();

                    const imagePreview = form.querySelector('.image-preview');
                    const imagePreviewer = form.querySelector('.image-previewer');
                    if (imagePreview) imagePreview.src = '';
                    if (imagePreviewer) imagePreviewer.classList.remove('selected');
                });
            }
        });
    });

    // Handle submit forms
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            clearErrorMessages(form);

            const formData = new FormData(form);
            try {
                const res = await fetch(form.action, {
                    method: 'post',
                    body: formData
                });

                if (res.ok) {
                    const modal = form.closest('._modal');
                    if (modal) {
                        modal.style.display = 'none';
                        document.body.classList.remove('modal-open');
                    }
                }
                else if (res.status === 400) {
                    const data = await res.json();
                    if (data.errors) {
                        Object.keys(data.errors).forEach(key => {
                            let input = form.querySelector(`[name="${key}"]`);
                            if (input) input.classList.add('input-validation-error');

                            let span = form.querySelector(`[data-valmsg-for="${key}"]`);
                            if (span) {
                                span.innerText = data.errors[key].join('\n');
                                span.classList.add('field-validation-error');
                            }
                        });
                    }
                }
            }
            catch {
                console.log('error submitting the form');
            }
        });
    });
});

// Clear error messages
function clearErrorMessages(form) {
    form.querySelectorAll('[data-val="true"]').forEach(input => {
        input.classList.remove('input-validation-error');
    });
    form.querySelectorAll('[data-valmsg-for]').forEach(span => {
        span.innerText = '';
        span.classList.remove('field-validation-error');
    });
}

// Generated by ChatGPT-03-high - OnClick EditMember button => calls on [HttpGet]GetMember(string id) then populated _EditMember Modal with the information
document.addEventListener('DOMContentLoaded', function () {
    var editButtons = document.querySelectorAll('.edit-member-btn');

    editButtons.forEach(function (button) {
        button.addEventListener('click', function (e) {
            e.preventDefault();

            var memberId = button.getAttribute('data-member-id');

            fetch('/Members/GetMember?id=' + encodeURIComponent(memberId))
                .then(function (response) {
                    if (!response.ok) {
                        throw new Error('Error: ' + response.statusText);
                    }
                    return response.json();
                })
                .then(function (data) {
                    console.log(data)
                    document.querySelector('#edit-member-modal input[name="FirstName"]').value = data.firstName || '';
                    document.querySelector('#edit-member-modal input[name="LastName"]').value = data.lastName || '';
                    document.querySelector('#edit-member-modal input[name="Email"]').value = data.email || '';
                    document.querySelector('#edit-member-modal input[name="PhoneNumber"]').value = data.phoneNumber || '';
                    document.querySelector('#edit-member-modal input[name="JobTitle"]').value = data.jobTitle || '';
                    document.querySelector('#edit-member-modal input[name="StreetName"]').value = data.streetName || '';
                    document.querySelector('#edit-member-modal input[name="City"]').value = data.city || '';
                    document.querySelector('#edit-member-modal input[name="PostalCode"]').value = data.postalCode || '';
                    document.querySelector('#edit-member-modal input[name="DateOfBirth"]').value = data.dateOfBirth || '';
                    document.querySelector('#edit-member-modal input[name="Id"]').value = data.id;
                    document.querySelector('#edit-member-modal select[name="RoleName"]').value = data.roleName;

                    if (data.imageUri)
                        ProcessImageForEditModal(data.imageUri)

                })
                .catch(function (error) {
                    console.error('Error fetching member: ', error);
                });
        });
    });
});

//Edit Client AJAX
document.addEventListener('DOMContentLoaded', function () {
    const editButtons = document.querySelectorAll('.edit-client-btn');

    editButtons.forEach(btn => {
        btn.addEventListener('click', async e => {
            e.preventDefault();

            const clientId = btn.getAttribute('data-client-id');
            try {
                const res = await fetch('/Clients/GetClient?id=' + encodeURIComponent(clientId));
                if (!res.ok) throw new Error(res.statusText);

                const client = await res.json()

                const modal = document.querySelector('#edit-client-modal');

                modal.querySelector('input[name="Id"]').value = client.id || ''
                modal.querySelector('input[name="ClientName"]').value = client.clientName || ''
                modal.querySelector('input[name="Email"]').value = client.email || ''
                modal.querySelector('input[name="PhoneNumber"]').value = client.phoneNumber || ''

                modal.style.display = 'flex';
                document.body.classList.add('modal-open');
            }
            catch (error) {
                console.error('Error fetching client:', error)
            }
        })
    })
})

//Edit Project AJAX 
document.addEventListener('DOMContentLoaded', function () {
    const editProjButtons = document.querySelectorAll('.edit-project-btn');

    editProjButtons.forEach(button => {
        button.addEventListener('click', async function (e) {
            e.preventDefault();
            const projectId = button.getAttribute('data-project-id');

            try {
                const res = await fetch('/Projects/GetProjectForEdit?id=' + encodeURIComponent(projectId));
                if (!res.ok) throw new Error(res.statusText);

                const data = await res.json();

                const project = data.project;
                const status = data.status;
                const client = data.client;
                console.log(project)
                document.querySelector('#edit-project-modal input[name="Id"]').value = project.id;
                document.querySelector('#edit-project-modal input[name="Title"]').value = project.title || '';
                document.querySelector('#edit-project-modal input[name="Description"]').value = project.description || '';
                document.querySelector('#edit-project-modal input[name="StartDate"]').value = project.startDate || '';
                document.querySelector('#edit-project-modal input[name="EndDate"]').value = project.endDate || '';
                document.querySelector('#edit-project-modal input[name="Budget"]').value = project.budget || 0;
                document.querySelector('#edit-project-modal select[name="ClientId"]').value = client.id;
                document.querySelector('#edit-project-modal select[name="StatusId"]').value = status.id;

                if (project.projectImageUri)
                    ProcessImageForEditModal(project.projectImageUri)

                data.project.projectMembers.forEach(m => {
                    window.editProjectSelector.addTag({
                        id: m.id,
                        fullName: `${m.firstName} ${m.lastName}`,
                        imageUri: m.imageUri
                    });
                });

                const modal = document.querySelector('#edit-project-modal');
                modal.style.display = 'flex';
                document.body.classList.add('modal-open');
            }
            catch (error) {
                console.error('Project not found:', error);
            }
        });
    });
});

function ProcessImageForEditModal(imageUri) {
    const modal = document.querySelector('.edit-modal-with-img');
    const previewer = modal.querySelector('.image-previewer');
    const imagePreview = previewer.querySelector('.image-preview');

    imagePreview.src = imageUri;
    previewer.classList.add('selected');

}

//Notification dropdown
document.addEventListener('DOMContentLoaded', () => {
    initializeDropdowns();
    updateRelativeTimes();
    updateNotificationCount();
    updateDeadline();
});

function closeAllDropdowns(exceptDropdown, dropdownElements) {
    dropdownElements.forEach(dropdown => {
        if (dropdown !== exceptDropdown) {
            dropdown.classList.remove('show')
        }
    })
}

function initializeDropdowns() {
    const dropdownTriggers = document.querySelectorAll('[data-type="dropdown-btn"]')
    const dropdownElements = new Set()

    dropdownTriggers.forEach(trigger => {
        const targetSelector = trigger.getAttribute('data-target')
        if (targetSelector) {
            const dropdown = trigger.closest('.notification-dropdown-container').querySelector(targetSelector)
            if (dropdown) {
                dropdownElements.add(dropdown)
            }
        }
    })

    dropdownTriggers.forEach(trigger => {
        trigger.addEventListener('click', (e) => {
            e.stopPropagation()
            const targetSelector = trigger.getAttribute('data-target')
            if (!targetSelector) return
            
            const dropdown = trigger.closest('.notification-dropdown-container').querySelector(targetSelector)
            if (!dropdown) return

            const isHamburgerMenu = trigger.closest('.expandable-menu') !== null;
            const otherDropdowns = new Set(dropdownElements);
            
            //Generated by ChatGPT 4o - Only close other dropdowns if we're in the same context (hamburger or main nav)
            Array.from(otherDropdowns).forEach(d => {
                const isDropdownInHamburger = d.closest('.expandable-menu') !== null;
                if (isHamburgerMenu === isDropdownInHamburger && d !== dropdown) {
                    d.classList.remove('show')
                }
            });

            dropdown.classList.toggle('show')
        })
    })

    dropdownElements.forEach(dropdown => {
        dropdown.addEventListener('click', (e) => {
            e.stopPropagation()
        })
    })

    document.addEventListener('click', () => {
        closeAllDropdowns(null, dropdownElements)
    })

    //Generated by ChatGPT-4o - Adds touch gesture handling for mobile dropdowns
    dropdownElements.forEach(dropdown => {
        let touchStartY = 0;
        let touchMoveY = 0;

        dropdown.addEventListener('touchstart', (e) => {
            touchStartY = e.touches[0].clientY;
            dropdown.style.transition = 'none';
        });

        dropdown.addEventListener('touchmove', (e) => {
            touchMoveY = e.touches[0].clientY;
            const deltaY = touchMoveY - touchStartY;
            
            if (deltaY > 0 && dropdown.closest('.expandable-menu')) {
                e.preventDefault();
                dropdown.style.transform = `translateY(${deltaY}px)`;
            }
        });

        dropdown.addEventListener('touchend', () => {
            dropdown.style.transition = 'transform 0.3s ease';
            
            if (touchMoveY - touchStartY > 100) {
                dropdown.classList.remove('show');
            } else {
                dropdown.style.transform = '';
            }
        });
    });
}

const connection = new signalR.HubConnectionBuilder()
    .withUrl("/notificationHub")
    .withAutomaticReconnect()
    .build()

connection.on("SendNotification", function (notification) {
    const notificationContainers = document.querySelectorAll('.notifications')
    notificationContainers.forEach(notifications => {
        const item = document.createElement('div')
        item.className = 'notification-item'
        item.setAttribute('data-id', notification.id)
     
        item.innerHTML =
            `<div class="_img-container">
                <img class="image" src="${notification.icon}" />
            </div>
            <div class="_text-container">
                <div class="message">${notification.message}</div>
                <div class="_time" data-created="${new Date(notification.created).toISOString()}">${notification.created}</div>
            </div>
            <button class="_btn-close" onclick="dismissNotification('${notification.id}')"></button>`;

        notifications.insertBefore(item, notifications.firstChild)
    })

    updateRelativeTimes()
    updateNotificationCount()
})

connection.on("NotificationDismissed", function (notificationId) {
    removeNotification(notificationId)
})

connection.start().then(() => console.log('SignalR connected')).catch(error => console.error(error))

async function dismissNotification(notificationId) {
    try {
        const res = await fetch(`/api/notifications/dismiss/${notificationId}`, { method: 'POST' })
        if (res.ok) {
            removeNotification(notificationId)
        }
        else {
            console.error('Error removing notification')
        }
    }
    catch (error) {
        console.error('Error removing notification: ', error)
    }
}

function removeNotification(notificationId) {
    const elements = document.querySelectorAll(`.notification-item[data-id="${notificationId}"]`);
    elements.forEach(element => {
        element.remove();
    });
    updateNotificationCount();
}

function updateNotificationCount() {
    const firstNotifications = document.querySelector('.notifications');
    const count = firstNotifications?.querySelectorAll('.notification-item').length ?? 0;

    document.querySelectorAll('.notification-number').forEach(number => {
        number.textContent = count;
    });

    document.querySelectorAll('.notification-bell').forEach(bell => {
        if (count > 0) {
            bell.classList.add('notification-active');
            bell.closest('.notification-dropdown-container')
               ?.querySelector('._number-container')
               ?.classList.add('notification-number-active');
        } else {
            bell.classList.remove('notification-active');
            bell.closest('.notification-dropdown-container')
               ?.querySelector('._number-container')
               ?.classList.remove('notification-number-active');
        }
    });
}

function updateRelativeTimes() {
    const elements = document.querySelectorAll('._time');
    const now = new Date();

    elements.forEach(el => {
        const created = new Date(el.getAttribute('data-created'));
        const diff = now - created;
        const diffSeconds = Math.floor(diff / 1000);
        const diffMinutes = Math.floor(diffSeconds / 60);
        const diffHours = Math.floor(diffMinutes / 60);
        const diffDays = Math.floor(diffHours / 24);
        const diffWeeks = Math.floor(diffDays / 7);

        let relativeTime = '';

        if (diffMinutes < 1) {
            relativeTime = '0 min ago';
        } else if (diffMinutes < 60) {
            relativeTime = diffMinutes + ' min ago';
        } else if (diffHours < 2) {
            relativeTime = diffHours + ' hour ago';
        } else if (diffHours < 24) {
            relativeTime = diffHours + ' hours ago';
        } else if (diffDays < 2) {
            relativeTime = diffDays + ' day ago';
        } else if (diffDays < 7) {
            relativeTime = diffDays + ' days ago';
        } else {
            if (diffWeeks === 1) {
                relativeTime = '1 week ago';
            } else {
                relativeTime = diffWeeks + ' weeks ago';
            }
        }
        el.textContent = relativeTime;
    })
}

function updateDeadline() {
    const now = new Date();

    document.querySelectorAll('._time-left').forEach(el => {
        const end = new Date(el.dataset.timeLeft);
        const diffMs = end - now;
        const parent = el.closest('.deadline');

        if (diffMs < 0) {
            el.textContent = 'Expired';
            parent?.classList.remove('near');
            return;
        }

        el.textContent = formatFuture(diffMs);

        if (diffMs < 7 * 24 * 60 * 60 * 1000) {
            parent?.classList.add('near');
        } else {
            parent?.classList.remove('near');
        }
    });
}

function formatFuture(diffMs) {
    const sec = Math.floor(diffMs / 1000);
    const min = Math.floor(sec / 60);
    const hrs = Math.floor(min / 60);
    const days = Math.floor(hrs / 24);
    const weeks = Math.floor(days / 7);

    if (days < 2) return '1 day left';
    if (days < 7) return days + ' days left';
    if (weeks === 1) return '1 week left';
    return weeks + ' weeks left';
}

//Project status buttons
document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('.status-btn');
    const projectCards = document.querySelectorAll('.project-card');

    buttons.forEach(btn => {
        btn.addEventListener('click', () => {
            buttons.forEach(b => b.classList.remove('_selected'));
            btn.classList.add('_selected');

            const filter = btn.dataset.filter;

            projectCards.forEach(card => {
                const status = card.dataset.status;
                if (filter === 'all' || status === filter) {
                    card.style.display = 'grid';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    });
});

//Handle Image previewer
document.addEventListener('DOMContentLoaded', () => {
    const previewSize = 150;

    document.querySelectorAll('.image-previewer').forEach(previewer => {
        const fileInput = previewer.querySelector('input[type="file"]');
        const imagePreview = previewer.querySelector('.image-preview');

        previewer.addEventListener('click', () => fileInput.click());

        fileInput.addEventListener('change', ({ target: { files } }) => {
            const file = files[0];
            if (file) {
                processImage(file, imagePreview, previewer, previewSize);
            }
        });
    });
});

// Image upload
async function loadImage(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onerror = () => reject(new Error("Failed to upload file."));
        reader.onload = e => {
            const img = new Image();
            img.onerror = () => reject(new Error("Failed to load image."));
            img.onload = () => resolve(img);
            img.src = e.target.result;
        };
        reader.readAsDataURL(file);
    });
}

// Process Image
async function processImage(file, imagePreview, previewer, previewSize = 150) {
    try {
        const img = await loadImage(file);
        const canvas = document.createElement('canvas');
        canvas.width = previewSize;
        canvas.height = previewSize;

        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0, previewSize, previewSize);
        imagePreview.src = canvas.toDataURL('image/jpeg');
        previewer.classList.add('selected');
    }
    catch (error) {
        console.error('Failed on image-processing:', error);
    }
}