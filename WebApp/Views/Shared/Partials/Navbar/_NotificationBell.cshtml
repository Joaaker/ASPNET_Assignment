@{
    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier) ?? "anonymous";
    var notificationsResult = await notificationService.GetNotificationsAsync(userId);
    var notifications = notificationsResult.Data;
}


}
<div class="notification-dropdown-container">

    <button id="notification-dropdown-button" class="notification-bell" data-type="dropdown-btn" data-target="#notification-dropdown">
        <i class="fa-solid fa-bell bell">
            @* @if (notifications.Any()) *@
            @* { *@
            <i class="fa-solid fa-circle notification-circle"></i>
            @* } *@
        </i>
    </button>

    <div id="notification-dropdown" class="notification-dropdown">
        <div class="notification-header">
            <h4>Notifications</h4>
            <span class="notification-number">0</span>
        </div>
        <div class="dropdown-divider"></div>
        <div class="notifications">

            @foreach (var notification in notifications!)
            {
                <div class="notification-item" data-id="">
                    <img class="image" src="@notification.Icon" />
                    <div class="message">@notification.Message</div>
                    <div class="time" data-created="@notification.Created.ToString("s")">@notification.Created</div>
                    <button class="btn-close" onclick="dismissNotification(@notification.Id)"></button>
                </div>
            }
            <div class="notification-item" data-id="">
                <img class="image" src="~/images/tinyAvatar.svg" />
                <div class="message">Hans was here.</div>
                <div class="time">1 day ago</div>
                <button class="btn-close" onclick="dismissNotification()"></button>
            </div>

        </div>
    </div>

</div>

<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/notificationHub")
        .build()

    connection.on("ReceiveNotification", function(notification) {
        const notifications = document.querySelector('.notifications')

        const item = document.createElement('div')
        item.className = 'notification-item'
        item.setAttribute('data-id', notification.id)
        item.innerHTML =
        `
        <img class="image" src="${notification.icon}" />
        <div class="message">${notification.message}</div>
        <div class="time" data-created="${new Date(notification.created).toISOString()}">${notification.created}</div>
        <button class="btn-close" onclick="dismissNotification('${notification.id}')"></button>
        `

        notifications.insertBefore(item, notifications.firstChild)

        updateRelativeTimes()
        updateNotificationCount()
    })

    connection.on("NotificationDismissed", function(notificationId) {
        removeNotification(notificationId)
    })

    connection.start().catch(error => console.error(error))

    async function dismissNotification(notificationId) {
        try {
            const res = await fetch(`/api/notifications/dismiss/${notificationId}`, { method : 'POST' })
            if (res.ok) {
                removeNotification(notificationId)
            }
            else {
                console.error('Error removing notification')
            }
        }
        catch (error) {
            console.error('Error removing notification: ', error)
        }
    }

    function removeNotification(notificationId) {
        const element = document.querySelector(`.notification-item[data-id="${notificationId}"]`)
        if (element) {
            element.remove()
            updateNotificationCount()
        }
    }

    function updateNotificationCount() {
        const notifications = document.querySelector('.notifications')
        const notificationNumber = document.querySelector('.notification-number')
        const notificationDropdownButton = document.querySelector('#notification-dropdown-button')
        const count = notifications.querySelectorAll('.notification-item').length

        if (notificationNumber) {
            notificationNumber.textContent = count
        }

        if (count > 0) {
            notificationDropdownButton.classList.add('notification-active')
        }

        if (count === 0) {
            notificationDropdownButton.classList.remove('notification-active')
        }

        // Video verison
        // let dot = notificationDropdownButton.querySelector('.dot.dot-red')
        // if (count > 0 && !dot) {
        //     dot = document.createElement('div')
        //     dot.className = 'dot dot-red'
        //     notificationDropdownButton.appendChild(dot)
        // }
    }

        function updateRelativeTimes() {
        const elements = document.querySelectorAll('.notification-item .time');
        const now = new Date();

        elements.forEach(el => {
            const created = new Date(el.getAttribute('data-created'));
            const diff = now - created;
            const diffSeconds = Math.floor(diff / 1000);
            const diffMinutes = Math.floor(diffSeconds / 60);
            const diffHours = Math.floor(diffMinutes / 60);
            const diffDays = Math.floor(diffHours / 24);
            const diffWeeks = Math.floor(diffDays / 7);

            let relativeTime = '';

            if (diffMinutes < 1) {
                relativeTime = '0 min ago';
            } else if (diffMinutes < 60) {
                relativeTime = diffMinutes + ' min ago';
            } else if (diffHours < 2) {
                relativeTime = diffHours + ' hour ago';
            } else if (diffHours < 24) {
                relativeTime = diffHours + ' hours ago';
            } else if (diffDays < 2) {
                relativeTime = diffDays + ' day ago';
            } else if (diffDays < 7) {
                relativeTime = diffDays + ' days ago';
            } else {
                relativeTime = diffWeeks + ' weeks ago';
            }

            el.textContent = relativeTime;
        });
    }
</script>