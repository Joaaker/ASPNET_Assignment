using System.ComponentModel.DataAnnotations;
using System.Globalization;
using Domain.Dtos;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace WebApp.ViewModels;

public class AddMemberViewModel
{
    [Display(Name = "Member Image", Prompt = "Select a image")]
    [DataType(DataType.Upload)]
    public IFormFile? MemberImage { get; set; }

    [Display(Name = "First Name", Prompt = "Enter first name")]
    [Required(ErrorMessage = "Required")]
    public string FirstName { get; set; } = null!;

    [Display(Name = "Last Name", Prompt = "Enter last name")]
    [Required(ErrorMessage = "Required")]
    public string LastName { get; set; } = null!;

    [Display(Name = "Email", Prompt = "Enter email address")]
    [DataType(DataType.EmailAddress)]
    [Required(ErrorMessage = "Required")]
    [RegularExpression(@"^[^\s@]+@[^\s@]+\.[^\s@]+$", ErrorMessage = "Invalid")]
    public string Email { get; set; } = null!;

    [Display(Name = "Phone", Prompt = "Enter phone number")]
    [Required(ErrorMessage = "Required")]
    public string Phone { get; set; } = null!;

    [Display(Name = "Job Title", Prompt = "Enter job title")]
    [Required(ErrorMessage = "Required")]
    public string JobTitle { get; set; } = null!;

    [Display(Name = "Street Name", Prompt = "Enter street name")]
    [Required(ErrorMessage = "Required")]
    public string StreetName { get; set; } = null!;

    [Display(Name = "Postal Code", Prompt = "Enter postal code")]
    [Required(ErrorMessage = "Required")]
    public string PostalCode { get; set; } = null!;

    [Display(Name = "City", Prompt = "Enter city")]
    [Required(ErrorMessage = "Required")]
    public string City { get; set; } = null!;


    //Code for DateOfBirth is generated by ChatGPT 03-mini-high - It separate day, month, and year then combines them into a single DateOnly value.
    [Display(Name = "Date of Birth")]
    [Required(ErrorMessage = "Required")]
    public DateOnly DateOfBirth
    {
        get => new(BirthYear, BirthMonth, BirthDay);
        set
        {
            BirthYear = value.Year;
            BirthMonth = value.Month;
            BirthDay = value.Day;
        }
    }

    [Range(1, 31, ErrorMessage = "Day is invalid")]
    public int BirthDay { get; set; }

    [Range(1, 12, ErrorMessage = "Month is invalid")]
    public int BirthMonth { get; set; }

    [Range(1900, 2200, ErrorMessage = "Year is invalid")]
    public int BirthYear { get; set; }

    public List<SelectListItem> DaysList =>
        [.. Enumerable.Range(1, 31).Select(d => new SelectListItem
        {
            Value = d.ToString(),
            Text = d.ToString()
        })];

    public List<SelectListItem> MonthsList =>
        [.. Enumerable.Range(1, 12).Select(m => new SelectListItem
        {
            Value = m.ToString(),
            Text = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)
        })];

    public List<SelectListItem> YearsList =>
        [.. Enumerable.Range(DateTime.Now.Year - 125, 101).Reverse().Select(y => new SelectListItem
        {
            Value = y.ToString(),
            Text = y.ToString()
        })];

    public static implicit operator MemberRegistrationFormDto(AddMemberViewModel model)
    {
        return model == null
            ? null!
            : new MemberRegistrationFormDto
            {
                FirstName = model.FirstName,
                LastName = model.LastName,
                Email = model.Email,
                PhoneNumber = model.Phone,
                JobTitle = model.JobTitle,
                StreetName = model.StreetName,
                PostalCode = model.PostalCode,
                City = model.City,
                DateOfBirth = model.DateOfBirth,
            };
    }

}
